(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{182:function(t,e,a){"use strict";a.r(e);var n=function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("layout-manager",{attrs:{page:t.$page}},[a("div",{staticClass:"markdown-body is-component"},[a("p",[t._v("分页效果预览：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://luyilin.github.io/Minemine-pagination/dist/index.html"}},[t._v("在线 demo")])]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/luyilin/Minemine-pagination"}},[t._v("github 地址")])]),t._v(" "),a("li",[t._v("分页效果截图"),a("img",{attrs:{src:"https://ooo.0o0.ooo/2017/04/19/58f7246807888.png",alt:"messagedboard"}})])]),t._v(" "),a("h3",{attrs:{id:""}},[t._v("前言")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("使用 vue-cli 初始化项目 ")]),t._v(" "),a("li",[t._v("使用 vuex 管理数据")]),t._v(" "),a("li",[t._v("node v6.9.2，npm v3.10.9")])])]),t._v(" "),a("h3",{attrs:{id:"-2"}},[t._v("分页原理")]),t._v(" "),a("p",[t._v("实现分页主要依靠两个参数，偏移量（offset）、限制数（limit）。点击分页发送 Ajax 请求，将这两个参数传给后端，后端从数据库筛选出对应的数据返回给前端，前端将获取到的数据添加到页面中，分页组件根据偏移量和限制数显示对应的页码，这是一个简单地实现分页的思路。")]),t._v(" "),a("h3",{attrs:{id:"-3"}},[t._v("分页类型")]),t._v(" "),a("p",[t._v("分页一般分为两种类型，一种经常用于移动端的滚动加载，或是一个按钮点击即可加载更多。这种分页实现起来比较简单，前端仅需定义一个 offset 变量，每次 ajax 请求时 offset += limit，然后将获取到的内容 append 上去即可。\n另一种是显示总页数、当前页数、上一页、下一页按钮，且页数较多时将中间页数用省略号表示。这种分页实现起来稍微复杂一点，但用户体验更好，本文讨论的就是如何使用 vue 实现这样的分页组件。")]),t._v(" "),a("h3",{attrs:{id:"-4"}},[t._v("分页组件")]),t._v(" "),a("p",[t._v("创建 pagination.vue 文件。")]),t._v(" "),a("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":""}},[a("pre",{attrs:{class:""}},[a("code",{attrs:{class:""}},[[t._v("\n    "),a("div",{attrs:{class:"page-wrap"}},[t._v("\n      "),a("ul",{attrs:{"v-show":"prePage",class:"li-page","v-tap":"{methods: goPrePage}"}},[t._v("上一页")]),t._v("\n      "),a("ul",[t._v("\n        "),a("li",{attrs:{"v-for":"i in showPageBtn",":class":"{active: i === currentPage, pointer: i, hover: i && i !== currentPage}","v-tap":"{methods: goPage, i: i}"}},[t._v("\n          "),a("a",{attrs:{"v-if":"i",class:"notPointer"}},[t._v("{{i}}")]),t._v("\n          "),a("a",{attrs:{"v-else":""}},[t._v("···")]),t._v("\n        ")]),t._v("\n      ")]),t._v("\n      "),a("ul",{attrs:{"v-show":"nextPage",class:"li-page","v-tap":"{methods: goNextPage}"}},[t._v("下一页")]),t._v("\n    ")]),t._v("\n")]],2)])]),a("p",[t._v("组件的作用域是独立的，父组件通信通过 props 向其传递数据，分页组件通过 $emit 触发在父组件定义的事件实现和父组件的通信，因此预设从父组件获取到需显示的总数 num 为 30 , limit 为 5，当然你也可以随意设置这两个值～")]),t._v(" "),a("pre",[a("code",[t._v("```\nlet that\nexport default{\n    data(){\n      that = this\n      return{\n        num: 30,\n        limit: 5\n      }\n    }\n}\n```\n")])]),t._v(" "),a("p",[t._v("计算几个变量，在这里可以使用 vue 的计算属性 computed\n总页数 totalPage 应该等于需显示的总数除以每页显示的个数，并向上取整，这个很好理解。")]),t._v(" "),a("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":""}},[a("pre",{attrs:{class:""}},[a("code",{attrs:{class:""}},[t._v("computed: {\n      totalPage() {\n        return Math.ceil(that.num / that.limit)\n      }\n    }")])])]),a("p",[t._v("偏移量 offset，因为点击上下页、制定页码均会改变 offset 变量，父组件也需要用到这个变量发送 ajax 请求，因此使用 vuex 存储 offset。")]),t._v(" "),a("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":""}},[a("pre",{attrs:{class:""}},[a("code",{attrs:{class:""}},[t._v("// pagination.vue\n    computed: {\n      offset() {\n          return that.$store.state.offset\n      }\n    }")])])]),a("p",[t._v("当前页面 currentPage，当前页面是比较重要的一个变量，显示用户当前所处页数，已知偏移量和每页显示数量可以得出当前页面是二者的余数向上取整，因为页数不从0开始，因此")]),t._v(" "),a("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":""}},[a("pre",{attrs:{class:""}},[a("code",{attrs:{class:""}},[t._v("computed: {\n      currentPage() {\n        return Math.ceil(that.offset / that.limit) + 1\n      }\n    }")])])]),a("p",[t._v("是否显示上一页按钮 prePage，因为在首页的时候偏移量为0，因此只要偏移量不等于0则当前页面肯定不在第一页，则显示上一页按钮，并且 num 不等于 0。")]),t._v(" "),a("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":""}},[a("pre",{attrs:{class:""}},[a("code",{attrs:{class:""}},[t._v("coumputed: {\n      prePage() {\n        return that.offset !== 0 && that.num\n      }\n    }")])])]),a("p",[t._v("是否显示下一页按钮 nextPage，这个也很好理解，只要偏移量和每页显示的个数相加小于需显示的总数，则显示下一页按钮，并且 num 不等于 0。")]),t._v(" "),a("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":""}},[a("pre",{attrs:{class:""}},[a("code",{attrs:{class:""}},[t._v("computed: {\n      nextPage() {\n        return (that.offset + that.limit < that.num) && that.num\n      }\n    }")])])]),a("p",[t._v("页码计算 showPageBtn，页码计算是这个分页组件的核心内容，基本思路是当总页数不大于5时，显示全部页码；当总页数大于5时，始终显示首尾页码，当当前页码距首页小于2时，显示前三页页码和省略号；当当前页码距尾页小于2时，显示后三页页码，当当前页码距首页等于2时，显示前四页页码和省略号；当当前页码距尾页等于2时，显示后四页页码和省略号；当当前页码距首页大于3且距尾页大于3时，显示当前页码和当前页码的前一页和后一页，两边各有一个省略号；在这里我们使用0代表省略号")]),t._v(" "),a("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":""}},[a("pre",{attrs:{class:""}},[a("code",{attrs:{class:""}},[t._v("computed: {\n      showPageBtn() {\n          let pageNum = that.totalPage,\n              index = that.currentPage,\n              arr = []\n          if (pageNum <= 5) {\n            for(let i = 1; i <= pageNum; i++) {\n              arr.push(i)\n            }\n            return arr\n          }\n          if (index <= 2) return [1,2,3,0,pageNum]\n          if (index >= pageNum -1) return [1,0, pageNum -2, pageNum -1, pageNum]\n          if (index === 3) return [1,2,3,4,0,pageNum]\n          if (index === pageNum -2) return [1,0, pageNum-3, pageNum-2, pageNum-1, pageNum]\n          return [1,0, index-1, index, index + 1, 0, pageNum]\n        }\n    }")])])]),a("p",[t._v("跳转事件，分别点击上一页、下一页和指定页码。")]),t._v(" "),a("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":""}},[a("pre",{attrs:{class:""}},[a("code",{attrs:{class:""}},[t._v("methods: {\n      goPage(params) {\n        if (params.i === 0 || params.i === that.currentPage) return\n        that.$store.commit('GO_PAGE', (params.i-1) * that.limit)\n        that.$emit('getNew')\n      },\n      goPrePage() {\n        that.$store.commit('PRE_PAGE', that.limit)\n        that.$emit('getNew')\n      },\n      goNextPage() {\n        that.$store.commit('NEXT_PAGE', that.limit)\n        that.$emit('getNew')\n      }\n    }")])])]),a("h3",{attrs:{id:"vuex"}},[t._v("vuex 部分")]),t._v(" "),a("p",[t._v("在此介绍一下 vuex 部分的实现，学习了二哲大大的 vuex 部分的结构。在 src 目录下（和 components 目录平级），新建 store 目录，其中 index.js 文件传入 mutation，初始化 vuex；")]),t._v(" "),a("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":""}},[a("pre",{attrs:{class:""}},[a("code",{attrs:{class:""}},[t._v("// vuex \bstore/index.js\n  import Vue from 'vue'\n  import Vuex from 'vuex'\n  import mutations from './mutations'\n  \n  Vue.use(Vuex);\n  \n  const state = {\n    offset: 0\n  };\n  \n  export default new Vuex.Store({\n    state,\n    mutations\n  })")])])]),a("p",[t._v("mutation-types.js 记录所有的事件名，其实这个文件最大的好处是能让我们更直观地管理所有的 vuex 方法，它的优点会在项目复杂后凸显出来，项目复杂时我们可能会使用 vuex 存储很多数据、定义很多方法，这时 mutation-types.js 就能更好更直观地管理这些方法。这也是一种设计理念嘛，有利于后期维护。")]),t._v(" "),a("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":""}},[a("pre",{attrs:{class:""}},[a("code",{attrs:{class:""}},[t._v("// mutation-types.js\n    export const PRE_PAGE = 'PRE_PAGE'\n    export const NEXT_PAGE = 'NEXT_PAGE'\n    export const GO_PAGE = 'GO_PAGE'")])])]),a("p",[t._v("mutation.js 这是 vuex 的核心文件，注册了实现的所有事件，我们定义了点击上一页、下一页和跳转到指定页面的方法。")]),t._v(" "),a("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":""}},[a("pre",{attrs:{class:""}},[a("code",{attrs:{class:""}},[t._v("// mutation.js\n  import * as types from './mutation-types'\n\n  export default {\n    // 分页 上一页\n    [types.PRE_PAGE] (state, offset) {\n      state.offset -= offset\n    },\n    // 分页 下一页\n    [types.NEXT_PAGE] (state, offset) {\n      state.offset += offset\n    },\n    // 分页 跳转到指定页码\n    [types.GO_PAGE] (state, offset) {\n      state.offset = offset\n    }\n  };")])])]),a("h3",{attrs:{id:"how-to-run"}},[t._v("how to run")]),t._v(" "),a("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":""}},[a("pre",{attrs:{class:""}},[a("code",{attrs:{class:""}},[t._v("$ npm install \n\n$ npm run dev\n\n// 访问 http://localhost:8088/index.html")])])]),a("p",[t._v("最后打个小广告🎣 ๑乛◡乛๑")]),t._v(" "),a("p",[t._v("我的个人网站："),a("a",{attrs:{href:"https://minemine.cc/"}},[t._v("https://minemine.cc/")])]),t._v(" "),a("p",[t._v("github 地址："),a("a",{attrs:{href:"https://github.com/luyilin"}},[t._v("https://github.com/luyilin")])])])])};n._withStripped=!0;var s=a(1),r=function(t){const e="wrap-page-2017-04-19-vue-pagination",a={slug:"vue-pagination",permalink:"/2017/04/19/vue-pagination",attributes:{title:"使用 vue2.0 实现一个简洁的分页组件",date:"2017-04-19T00:00:00.000Z",tags:["code"],type:"post",layout:"post"},body:'<p>分页效果预览：</p>\n<ul>\n<li><a href="https://luyilin.github.io/Minemine-pagination/dist/index.html">在线 demo</a></li>\n<li><a href="https://github.com/luyilin/Minemine-pagination">github 地址</a></li>\n<li>分页效果截图<img src="https://ooo.0o0.ooo/2017/04/19/58f7246807888.png" alt="messagedboard"></li>\n</ul>\n<h3 id="">前言</h3>\n<blockquote>\n<ol>\n<li>使用 vue-cli 初始化项目 \x3c!--more--\x3e</li>\n<li>使用 vuex 管理数据</li>\n<li>node v6.9.2，npm v3.10.9</li>\n</ol>\n</blockquote>\n<h3 id="-2">分页原理</h3>\n<p>实现分页主要依靠两个参数，偏移量（offset）、限制数（limit）。点击分页发送 Ajax 请求，将这两个参数传给后端，后端从数据库筛选出对应的数据返回给前端，前端将获取到的数据添加到页面中，分页组件根据偏移量和限制数显示对应的页码，这是一个简单地实现分页的思路。</p>\n<h3 id="-3">分页类型</h3>\n<p>分页一般分为两种类型，一种经常用于移动端的滚动加载，或是一个按钮点击即可加载更多。这种分页实现起来比较简单，前端仅需定义一个 offset 变量，每次 ajax 请求时 offset += limit，然后将获取到的内容 append 上去即可。\n另一种是显示总页数、当前页数、上一页、下一页按钮，且页数较多时将中间页数用省略号表示。这种分页实现起来稍微复杂一点，但用户体验更好，本文讨论的就是如何使用 vue 实现这样的分页组件。</p>\n<h3 id="-4">分页组件</h3>\n<p>创建 pagination.vue 文件。</p>\n<div class="pre-wrapper" v-pre="" data-lang=""><pre class=""><code class=""><template>\n    <div class="page-wrap">\n      <ul v-show="prePage" class="li-page" v-tap="{methods: goPrePage}">上一页</ul>\n      <ul>\n        <li v-for="i in showPageBtn" :class="{active: i === currentPage, pointer: i, hover: i && i !== currentPage}"\n            v-tap="{methods: goPage, i: i}">\n          <a v-if="i" class="notPointer">{{i}}</a>\n          <a v-else>···</a>\n        </li>\n      </ul>\n      <ul v-show="nextPage" class="li-page" v-tap="{methods: goNextPage}">下一页</ul>\n    </div>\n</template></code></pre></div><p>组件的作用域是独立的，父组件通信通过 props 向其传递数据，分页组件通过 $emit 触发在父组件定义的事件实现和父组件的通信，因此预设从父组件获取到需显示的总数 num 为 30 , limit 为 5，当然你也可以随意设置这两个值～</p>\n<pre><code>```\nlet that\nexport default{\n    data(){\n      that = this\n      return{\n        num: 30,\n        limit: 5\n      }\n    }\n}\n```\n</code></pre>\n<p>计算几个变量，在这里可以使用 vue 的计算属性 computed\n总页数 totalPage 应该等于需显示的总数除以每页显示的个数，并向上取整，这个很好理解。</p>\n<div class="pre-wrapper" v-pre="" data-lang=""><pre class=""><code class="">computed: {\n      totalPage() {\n        return Math.ceil(that.num / that.limit)\n      }\n    }</code></pre></div><p>偏移量 offset，因为点击上下页、制定页码均会改变 offset 变量，父组件也需要用到这个变量发送 ajax 请求，因此使用 vuex 存储 offset。</p>\n<div class="pre-wrapper" v-pre="" data-lang=""><pre class=""><code class="">// pagination.vue\n    computed: {\n      offset() {\n          return that.$store.state.offset\n      }\n    }</code></pre></div><p>当前页面 currentPage，当前页面是比较重要的一个变量，显示用户当前所处页数，已知偏移量和每页显示数量可以得出当前页面是二者的余数向上取整，因为页数不从0开始，因此</p>\n<div class="pre-wrapper" v-pre="" data-lang=""><pre class=""><code class="">computed: {\n      currentPage() {\n        return Math.ceil(that.offset / that.limit) + 1\n      }\n    }</code></pre></div><p>是否显示上一页按钮 prePage，因为在首页的时候偏移量为0，因此只要偏移量不等于0则当前页面肯定不在第一页，则显示上一页按钮，并且 num 不等于 0。</p>\n<div class="pre-wrapper" v-pre="" data-lang=""><pre class=""><code class="">coumputed: {\n      prePage() {\n        return that.offset !== 0 && that.num\n      }\n    }</code></pre></div><p>是否显示下一页按钮 nextPage，这个也很好理解，只要偏移量和每页显示的个数相加小于需显示的总数，则显示下一页按钮，并且 num 不等于 0。</p>\n<div class="pre-wrapper" v-pre="" data-lang=""><pre class=""><code class="">computed: {\n      nextPage() {\n        return (that.offset + that.limit < that.num) && that.num\n      }\n    }</code></pre></div><p>页码计算 showPageBtn，页码计算是这个分页组件的核心内容，基本思路是当总页数不大于5时，显示全部页码；当总页数大于5时，始终显示首尾页码，当当前页码距首页小于2时，显示前三页页码和省略号；当当前页码距尾页小于2时，显示后三页页码，当当前页码距首页等于2时，显示前四页页码和省略号；当当前页码距尾页等于2时，显示后四页页码和省略号；当当前页码距首页大于3且距尾页大于3时，显示当前页码和当前页码的前一页和后一页，两边各有一个省略号；在这里我们使用0代表省略号</p>\n<div class="pre-wrapper" v-pre="" data-lang=""><pre class=""><code class="">computed: {\n      showPageBtn() {\n          let pageNum = that.totalPage,\n              index = that.currentPage,\n              arr = []\n          if (pageNum <= 5) {\n            for(let i = 1; i <= pageNum; i++) {\n              arr.push(i)\n            }\n            return arr\n          }\n          if (index <= 2) return [1,2,3,0,pageNum]\n          if (index >= pageNum -1) return [1,0, pageNum -2, pageNum -1, pageNum]\n          if (index === 3) return [1,2,3,4,0,pageNum]\n          if (index === pageNum -2) return [1,0, pageNum-3, pageNum-2, pageNum-1, pageNum]\n          return [1,0, index-1, index, index + 1, 0, pageNum]\n        }\n    }</code></pre></div><p>跳转事件，分别点击上一页、下一页和指定页码。</p>\n<div class="pre-wrapper" v-pre="" data-lang=""><pre class=""><code class="">methods: {\n      goPage(params) {\n        if (params.i === 0 || params.i === that.currentPage) return\n        that.$store.commit(\'GO_PAGE\', (params.i-1) * that.limit)\n        that.$emit(\'getNew\')\n      },\n      goPrePage() {\n        that.$store.commit(\'PRE_PAGE\', that.limit)\n        that.$emit(\'getNew\')\n      },\n      goNextPage() {\n        that.$store.commit(\'NEXT_PAGE\', that.limit)\n        that.$emit(\'getNew\')\n      }\n    }</code></pre></div><h3 id="vuex">vuex 部分</h3>\n<p>在此介绍一下 vuex 部分的实现，学习了二哲大大的 vuex 部分的结构。在 src 目录下（和 components 目录平级），新建 store 目录，其中 index.js 文件传入 mutation，初始化 vuex；</p>\n<div class="pre-wrapper" v-pre="" data-lang=""><pre class=""><code class="">// vuex \bstore/index.js\n  import Vue from \'vue\'\n  import Vuex from \'vuex\'\n  import mutations from \'./mutations\'\n  \n  Vue.use(Vuex);\n  \n  const state = {\n    offset: 0\n  };\n  \n  export default new Vuex.Store({\n    state,\n    mutations\n  })</code></pre></div><p>mutation-types.js 记录所有的事件名，其实这个文件最大的好处是能让我们更直观地管理所有的 vuex 方法，它的优点会在项目复杂后凸显出来，项目复杂时我们可能会使用 vuex 存储很多数据、定义很多方法，这时 mutation-types.js 就能更好更直观地管理这些方法。这也是一种设计理念嘛，有利于后期维护。</p>\n<div class="pre-wrapper" v-pre="" data-lang=""><pre class=""><code class="">// mutation-types.js\n    export const PRE_PAGE = \'PRE_PAGE\'\n    export const NEXT_PAGE = \'NEXT_PAGE\'\n    export const GO_PAGE = \'GO_PAGE\'</code></pre></div><p>mutation.js 这是 vuex 的核心文件，注册了实现的所有事件，我们定义了点击上一页、下一页和跳转到指定页面的方法。</p>\n<div class="pre-wrapper" v-pre="" data-lang=""><pre class=""><code class="">// mutation.js\n  import * as types from \'./mutation-types\'\n\n  export default {\n    // 分页 上一页\n    [types.PRE_PAGE] (state, offset) {\n      state.offset -= offset\n    },\n    // 分页 下一页\n    [types.NEXT_PAGE] (state, offset) {\n      state.offset += offset\n    },\n    // 分页 跳转到指定页码\n    [types.GO_PAGE] (state, offset) {\n      state.offset = offset\n    }\n  };</code></pre></div><h3 id="how-to-run">how to run</h3>\n<div class="pre-wrapper" v-pre="" data-lang=""><pre class=""><code class="">$ npm install \n\n$ npm run dev\n\n// 访问 http://localhost:8088/index.html</code></pre></div><p>最后打个小广告🎣 ๑乛◡乛๑</p>\n<p>我的个人网站：<a href="https://minemine.cc/">https://minemine.cc/</a></p>\n<p>github 地址：<a href="https://github.com/luyilin">https://github.com/luyilin</a></p>\n',excerpt:"<p>分页效果预览：</p>\n"};t.options.name=e,t.options.computed=Object.assign({},t.options.computed,{$page:()=>a})},p=Object(s.a)({},n,[],!1,null,null,null);"function"==typeof r&&r(p),p.options.__file=".peco/data/_posts/vue-pagination.md.peson";e.default=p.exports}}]);